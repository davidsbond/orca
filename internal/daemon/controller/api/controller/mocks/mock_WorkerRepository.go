// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	worker "github.com/davidsbond/orca/internal/daemon/controller/database/worker"
)

// WorkerRepository is an autogenerated mock type for the WorkerRepository type
type WorkerRepository struct {
	mock.Mock
}

type WorkerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkerRepository) EXPECT() *WorkerRepository_Expecter {
	return &WorkerRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *WorkerRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkerRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type WorkerRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *WorkerRepository_Expecter) Delete(ctx interface{}, id interface{}) *WorkerRepository_Delete_Call {
	return &WorkerRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *WorkerRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *WorkerRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WorkerRepository_Delete_Call) Return(_a0 error) *WorkerRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkerRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *WorkerRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *WorkerRepository) Save(ctx context.Context, _a1 worker.Worker) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, worker.Worker) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkerRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type WorkerRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 worker.Worker
func (_e *WorkerRepository_Expecter) Save(ctx interface{}, _a1 interface{}) *WorkerRepository_Save_Call {
	return &WorkerRepository_Save_Call{Call: _e.mock.On("Save", ctx, _a1)}
}

func (_c *WorkerRepository_Save_Call) Run(run func(ctx context.Context, _a1 worker.Worker)) *WorkerRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(worker.Worker))
	})
	return _c
}

func (_c *WorkerRepository_Save_Call) Return(_a0 error) *WorkerRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkerRepository_Save_Call) RunAndReturn(run func(context.Context, worker.Worker) error) *WorkerRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkerRepository creates a new instance of WorkerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkerRepository {
	mock := &WorkerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
