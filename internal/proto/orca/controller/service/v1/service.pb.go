// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: orca/controller/service/v1/service.proto

package controllersvcv1

import (
	v11 "github.com/davidsbond/orca/internal/proto/orca/task/v1"
	v1 "github.com/davidsbond/orca/internal/proto/orca/worker/v1"
	v12 "github.com/davidsbond/orca/internal/proto/orca/workflow/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterWorkerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Worker        *v1.Worker             `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterWorkerRequest) Reset() {
	*x = RegisterWorkerRequest{}
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWorkerRequest) ProtoMessage() {}

func (x *RegisterWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWorkerRequest.ProtoReflect.Descriptor instead.
func (*RegisterWorkerRequest) Descriptor() ([]byte, []int) {
	return file_orca_controller_service_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterWorkerRequest) GetWorker() *v1.Worker {
	if x != nil {
		return x.Worker
	}
	return nil
}

type RegisterWorkerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterWorkerResponse) Reset() {
	*x = RegisterWorkerResponse{}
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterWorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWorkerResponse) ProtoMessage() {}

func (x *RegisterWorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWorkerResponse.ProtoReflect.Descriptor instead.
func (*RegisterWorkerResponse) Descriptor() ([]byte, []int) {
	return file_orca_controller_service_v1_service_proto_rawDescGZIP(), []int{1}
}

type DeregisterWorkerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the worker to deregister.
	WorkerId      string `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeregisterWorkerRequest) Reset() {
	*x = DeregisterWorkerRequest{}
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeregisterWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregisterWorkerRequest) ProtoMessage() {}

func (x *DeregisterWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregisterWorkerRequest.ProtoReflect.Descriptor instead.
func (*DeregisterWorkerRequest) Descriptor() ([]byte, []int) {
	return file_orca_controller_service_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *DeregisterWorkerRequest) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

type DeregisterWorkerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeregisterWorkerResponse) Reset() {
	*x = DeregisterWorkerResponse{}
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeregisterWorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregisterWorkerResponse) ProtoMessage() {}

func (x *DeregisterWorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregisterWorkerResponse.ProtoReflect.Descriptor instead.
func (*DeregisterWorkerResponse) Descriptor() ([]byte, []int) {
	return file_orca_controller_service_v1_service_proto_rawDescGZIP(), []int{3}
}

type ScheduleTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The workflow run the task is scheduled for.
	WorkflowRunId string `protobuf:"bytes,1,opt,name=workflow_run_id,json=workflowRunId,proto3" json:"workflow_run_id,omitempty"`
	// The name of the task to run.
	TaskName string `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	// Encoded input to pass to the task.
	Input         []byte `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleTaskRequest) Reset() {
	*x = ScheduleTaskRequest{}
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTaskRequest) ProtoMessage() {}

func (x *ScheduleTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTaskRequest.ProtoReflect.Descriptor instead.
func (*ScheduleTaskRequest) Descriptor() ([]byte, []int) {
	return file_orca_controller_service_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *ScheduleTaskRequest) GetWorkflowRunId() string {
	if x != nil {
		return x.WorkflowRunId
	}
	return ""
}

func (x *ScheduleTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ScheduleTaskRequest) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

type ScheduleTaskResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the task run.
	TaskRunId     string `protobuf:"bytes,1,opt,name=task_run_id,json=taskRunId,proto3" json:"task_run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleTaskResponse) Reset() {
	*x = ScheduleTaskResponse{}
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTaskResponse) ProtoMessage() {}

func (x *ScheduleTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTaskResponse.ProtoReflect.Descriptor instead.
func (*ScheduleTaskResponse) Descriptor() ([]byte, []int) {
	return file_orca_controller_service_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *ScheduleTaskResponse) GetTaskRunId() string {
	if x != nil {
		return x.TaskRunId
	}
	return ""
}

type SetTaskStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskRunId     string                 `protobuf:"bytes,1,opt,name=task_run_id,json=taskRunId,proto3" json:"task_run_id,omitempty"`
	Status        v11.Status             `protobuf:"varint,2,opt,name=status,proto3,enum=orca.task.v1.Status" json:"status,omitempty"`
	Output        []byte                 `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTaskStatusRequest) Reset() {
	*x = SetTaskStatusRequest{}
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTaskStatusRequest) ProtoMessage() {}

func (x *SetTaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTaskStatusRequest.ProtoReflect.Descriptor instead.
func (*SetTaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_orca_controller_service_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *SetTaskStatusRequest) GetTaskRunId() string {
	if x != nil {
		return x.TaskRunId
	}
	return ""
}

func (x *SetTaskStatusRequest) GetStatus() v11.Status {
	if x != nil {
		return x.Status
	}
	return v11.Status(0)
}

func (x *SetTaskStatusRequest) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

type SetTaskStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTaskStatusResponse) Reset() {
	*x = SetTaskStatusResponse{}
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTaskStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTaskStatusResponse) ProtoMessage() {}

func (x *SetTaskStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTaskStatusResponse.ProtoReflect.Descriptor instead.
func (*SetTaskStatusResponse) Descriptor() ([]byte, []int) {
	return file_orca_controller_service_v1_service_proto_rawDescGZIP(), []int{7}
}

type GetTaskStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskRunId     string                 `protobuf:"bytes,1,opt,name=task_run_id,json=taskRunId,proto3" json:"task_run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskStatusRequest) Reset() {
	*x = GetTaskStatusRequest{}
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskStatusRequest) ProtoMessage() {}

func (x *GetTaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_orca_controller_service_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetTaskStatusRequest) GetTaskRunId() string {
	if x != nil {
		return x.TaskRunId
	}
	return ""
}

type GetTaskStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *v11.Task              `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskStatusResponse) Reset() {
	*x = GetTaskStatusResponse{}
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskStatusResponse) ProtoMessage() {}

func (x *GetTaskStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskStatusResponse.ProtoReflect.Descriptor instead.
func (*GetTaskStatusResponse) Descriptor() ([]byte, []int) {
	return file_orca_controller_service_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetTaskStatusResponse) GetTask() *v11.Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type SetWorkflowStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowRunId string                 `protobuf:"bytes,1,opt,name=workflow_run_id,json=workflowRunId,proto3" json:"workflow_run_id,omitempty"`
	Status        v12.Status             `protobuf:"varint,2,opt,name=status,proto3,enum=orca.workflow.v1.Status" json:"status,omitempty"`
	Output        []byte                 `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetWorkflowStatusRequest) Reset() {
	*x = SetWorkflowStatusRequest{}
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetWorkflowStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWorkflowStatusRequest) ProtoMessage() {}

func (x *SetWorkflowStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWorkflowStatusRequest.ProtoReflect.Descriptor instead.
func (*SetWorkflowStatusRequest) Descriptor() ([]byte, []int) {
	return file_orca_controller_service_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *SetWorkflowStatusRequest) GetWorkflowRunId() string {
	if x != nil {
		return x.WorkflowRunId
	}
	return ""
}

func (x *SetWorkflowStatusRequest) GetStatus() v12.Status {
	if x != nil {
		return x.Status
	}
	return v12.Status(0)
}

func (x *SetWorkflowStatusRequest) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

type SetWorkflowStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetWorkflowStatusResponse) Reset() {
	*x = SetWorkflowStatusResponse{}
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetWorkflowStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWorkflowStatusResponse) ProtoMessage() {}

func (x *SetWorkflowStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orca_controller_service_v1_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWorkflowStatusResponse.ProtoReflect.Descriptor instead.
func (*SetWorkflowStatusResponse) Descriptor() ([]byte, []int) {
	return file_orca_controller_service_v1_service_proto_rawDescGZIP(), []int{11}
}

var File_orca_controller_service_v1_service_proto protoreflect.FileDescriptor

var file_orca_controller_service_v1_service_proto_rawDesc = string([]byte{
	0x0a, 0x28, 0x6f, 0x72, 0x63, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6f, 0x72, 0x63, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x6f, 0x72, 0x63, 0x61, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x6f, 0x72, 0x63, 0x61, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6f, 0x72,
	0x63, 0x61, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a,
	0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x63, 0x61, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x06,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x36, 0x0a, 0x17, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x36, 0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x7c,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x63, 0x61, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x17, 0x0a, 0x15,
	0x53, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x3f, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x63, 0x61, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x8c,
	0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x63, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x1b, 0x0a,
	0x19, 0x53, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xed, 0x05, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x77, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x12, 0x31, 0x2e, 0x6f, 0x72, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x72, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x10, 0x44, 0x65, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x33, 0x2e,
	0x6f, 0x72, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x72, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2f, 0x2e, 0x6f, 0x72, 0x63, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x72, 0x63, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x0d, 0x53,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x2e, 0x6f,
	0x72, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6f, 0x72, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x74, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x72, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x72, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x2e,
	0x6f, 0x72, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x72, 0x63, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x56, 0x5a, 0x54, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x76, 0x69, 0x64, 0x73, 0x62,
	0x6f, 0x6e, 0x64, 0x2f, 0x6f, 0x72, 0x63, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72, 0x63, 0x61, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x76, 0x63,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_orca_controller_service_v1_service_proto_rawDescOnce sync.Once
	file_orca_controller_service_v1_service_proto_rawDescData []byte
)

func file_orca_controller_service_v1_service_proto_rawDescGZIP() []byte {
	file_orca_controller_service_v1_service_proto_rawDescOnce.Do(func() {
		file_orca_controller_service_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_orca_controller_service_v1_service_proto_rawDesc), len(file_orca_controller_service_v1_service_proto_rawDesc)))
	})
	return file_orca_controller_service_v1_service_proto_rawDescData
}

var file_orca_controller_service_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_orca_controller_service_v1_service_proto_goTypes = []any{
	(*RegisterWorkerRequest)(nil),     // 0: orca.controller.service.v1.RegisterWorkerRequest
	(*RegisterWorkerResponse)(nil),    // 1: orca.controller.service.v1.RegisterWorkerResponse
	(*DeregisterWorkerRequest)(nil),   // 2: orca.controller.service.v1.DeregisterWorkerRequest
	(*DeregisterWorkerResponse)(nil),  // 3: orca.controller.service.v1.DeregisterWorkerResponse
	(*ScheduleTaskRequest)(nil),       // 4: orca.controller.service.v1.ScheduleTaskRequest
	(*ScheduleTaskResponse)(nil),      // 5: orca.controller.service.v1.ScheduleTaskResponse
	(*SetTaskStatusRequest)(nil),      // 6: orca.controller.service.v1.SetTaskStatusRequest
	(*SetTaskStatusResponse)(nil),     // 7: orca.controller.service.v1.SetTaskStatusResponse
	(*GetTaskStatusRequest)(nil),      // 8: orca.controller.service.v1.GetTaskStatusRequest
	(*GetTaskStatusResponse)(nil),     // 9: orca.controller.service.v1.GetTaskStatusResponse
	(*SetWorkflowStatusRequest)(nil),  // 10: orca.controller.service.v1.SetWorkflowStatusRequest
	(*SetWorkflowStatusResponse)(nil), // 11: orca.controller.service.v1.SetWorkflowStatusResponse
	(*v1.Worker)(nil),                 // 12: orca.worker.v1.Worker
	(v11.Status)(0),                   // 13: orca.task.v1.Status
	(*v11.Task)(nil),                  // 14: orca.task.v1.Task
	(v12.Status)(0),                   // 15: orca.workflow.v1.Status
}
var file_orca_controller_service_v1_service_proto_depIdxs = []int32{
	12, // 0: orca.controller.service.v1.RegisterWorkerRequest.worker:type_name -> orca.worker.v1.Worker
	13, // 1: orca.controller.service.v1.SetTaskStatusRequest.status:type_name -> orca.task.v1.Status
	14, // 2: orca.controller.service.v1.GetTaskStatusResponse.task:type_name -> orca.task.v1.Task
	15, // 3: orca.controller.service.v1.SetWorkflowStatusRequest.status:type_name -> orca.workflow.v1.Status
	0,  // 4: orca.controller.service.v1.ControllerService.RegisterWorker:input_type -> orca.controller.service.v1.RegisterWorkerRequest
	2,  // 5: orca.controller.service.v1.ControllerService.DeregisterWorker:input_type -> orca.controller.service.v1.DeregisterWorkerRequest
	4,  // 6: orca.controller.service.v1.ControllerService.ScheduleTask:input_type -> orca.controller.service.v1.ScheduleTaskRequest
	6,  // 7: orca.controller.service.v1.ControllerService.SetTaskStatus:input_type -> orca.controller.service.v1.SetTaskStatusRequest
	8,  // 8: orca.controller.service.v1.ControllerService.GetTaskStatus:input_type -> orca.controller.service.v1.GetTaskStatusRequest
	10, // 9: orca.controller.service.v1.ControllerService.SetWorkflowStatus:input_type -> orca.controller.service.v1.SetWorkflowStatusRequest
	1,  // 10: orca.controller.service.v1.ControllerService.RegisterWorker:output_type -> orca.controller.service.v1.RegisterWorkerResponse
	3,  // 11: orca.controller.service.v1.ControllerService.DeregisterWorker:output_type -> orca.controller.service.v1.DeregisterWorkerResponse
	5,  // 12: orca.controller.service.v1.ControllerService.ScheduleTask:output_type -> orca.controller.service.v1.ScheduleTaskResponse
	7,  // 13: orca.controller.service.v1.ControllerService.SetTaskStatus:output_type -> orca.controller.service.v1.SetTaskStatusResponse
	9,  // 14: orca.controller.service.v1.ControllerService.GetTaskStatus:output_type -> orca.controller.service.v1.GetTaskStatusResponse
	11, // 15: orca.controller.service.v1.ControllerService.SetWorkflowStatus:output_type -> orca.controller.service.v1.SetWorkflowStatusResponse
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_orca_controller_service_v1_service_proto_init() }
func file_orca_controller_service_v1_service_proto_init() {
	if File_orca_controller_service_v1_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_orca_controller_service_v1_service_proto_rawDesc), len(file_orca_controller_service_v1_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orca_controller_service_v1_service_proto_goTypes,
		DependencyIndexes: file_orca_controller_service_v1_service_proto_depIdxs,
		MessageInfos:      file_orca_controller_service_v1_service_proto_msgTypes,
	}.Build()
	File_orca_controller_service_v1_service_proto = out.File
	file_orca_controller_service_v1_service_proto_goTypes = nil
	file_orca_controller_service_v1_service_proto_depIdxs = nil
}
