syntax = "proto3";

package orca.private.controller.service.v1;

import "google/api/visibility.proto";
import "orca/private/worker/v1/worker.proto";
import "orca/task/v1/task.proto";
import "orca/workflow/v1/workflow.proto";

option go_package = "github.com/davidsbond/orca/internal/proto/orca/private/controller/service/v1;controllersvcv1";

// The ControllerService contains endpoints that are exposed on orca controller instances and relate specifically
// to controller operations. This service should only be used by workers.
service ControllerService {
  option (google.api.api_visibility) = {restriction: "PRIVATE"};

  // Register a Worker
  rpc RegisterWorker(RegisterWorkerRequest) returns (RegisterWorkerResponse);

  // Deregister a Worker
  rpc DeregisterWorker(DeregisterWorkerRequest) returns (DeregisterWorkerResponse);

  // Schedule a Task
  rpc ScheduleTask(ScheduleTaskRequest) returns (ScheduleTaskResponse);

  // Set the status of a Task run.
  rpc SetTaskRunStatus(SetTaskRunStatusRequest) returns (SetTaskRunStatusResponse);

  // Get information on a task run.
  rpc GetTaskRun(GetTaskRunRequest) returns (GetTaskRunResponse);

  // Schedule a Workflow.
  rpc ScheduleWorkflow(ScheduleWorkflowRequest) returns (ScheduleWorkflowResponse);

  // Set the status of a Workflow run.
  rpc SetWorkflowRunStatus(SetWorkflowRunStatusRequest) returns (SetWorkflowRunStatusResponse);

  // Get information on a workflow run.
  rpc GetWorkflowRun(GetWorkflowRunRequest) returns (GetWorkflowRunResponse);
}

message RegisterWorkerRequest {
  // The worker details.
  orca.private.worker.v1.Worker worker = 1;
}

message RegisterWorkerResponse {}

message DeregisterWorkerRequest {
  // The unique identifier of the worker to deregister.
  string worker_id = 1;
}

message DeregisterWorkerResponse {}

message ScheduleTaskRequest {
  // The workflow run the task is scheduled for.
  string workflow_run_id = 1;
  // The name of the task to run.
  string task_name = 2;
  // Encoded input to pass to the task.
  bytes input = 3;
  // The key used to prevent rerunning this task if not required. If a a task of the same name and idempotent key
  // is found, this run will use the output of that previously run task.
  string idempotent_key = 4;
}

message ScheduleTaskResponse {
  // The unique identifier of the task run.
  string task_run_id = 1;
}

message SetTaskRunStatusRequest {
  // The unique identifier of the task run.
  string task_run_id = 1;
  // The status of the task run.
  orca.task.v1.Status status = 2;
  // The output of the task run. This is optional and should only be provided when the task is in a completed
  // or failed state.
  bytes output = 3;
}

message SetTaskRunStatusResponse {}

message GetTaskRunRequest {
  // The unique identifier of the task run.
  string task_run_id = 1;
}

message GetTaskRunResponse {
  // The task run state.
  orca.task.v1.Run task_run = 1;
}

message SetWorkflowRunStatusRequest {
  // The unique identifier of the workflow run.
  string workflow_run_id = 1;
  // The status of the workflow run.
  orca.workflow.v1.Status status = 2;
  // The output of the workflow run. This is optional and should only be provided when the workflow is in a completed
  // or failed state.
  bytes output = 3;
}

message SetWorkflowRunStatusResponse {}

message ScheduleWorkflowRequest {
  // The parent workflow triggering this one. Assumed to be the root if an ID is not provided.
  string parent_workflow_run_id = 1;
  // The name of the workflow to run.
  string workflow_name = 2;
  // Encoded input to pass to the task.
  bytes input = 3;
  // The key used to prevent rerunning this workflow if not required. If a a workflow of the same name and idempotent key
  // is found, this run will use the output of that previously run workflow.
  string idempotent_key = 4;
}

message ScheduleWorkflowResponse {
  // The unique identifier of the workflow run.
  string workflow_run_id = 1;
}

message GetWorkflowRunRequest {
  // The unique identifier of the workflow run.
  string workflow_run_id = 1;
}

message GetWorkflowRunResponse {
  // The workflow run state.
  orca.workflow.v1.Run workflow_run = 1;
}
